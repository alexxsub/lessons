import { ApolloServer } from '@apollo/server';
import { startStandaloneServer } from '@apollo/server/standalone';

// –û–ø–∏—Å—ã–≤–∞–µ–º —Å—Ö–µ–º—É, –∏—Å–ø–æ–ª—å–∑—É—è sdl —è–∑—ã–∫
const typeDefs = `#graphql
  type Phone {
    """
    –ù–æ–º–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    """
    number: String
    """
    –ò–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    """
    name: String
  }
  """
  –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
  """
  type Query {
    Phones: [Phone]
  } 
`;

//–ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö, –º–∞—Å—Å–∏–≤ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏
var _phones = [
  { number: "5555", name: "John" },
  { number: "6666", name: "Bill" },
  { number: "7777", name: "Smith" },
  { number: "1234", name: "Sara" }
];

// –û–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑–æ–ª–≤–µ—Ä –¥–ª—è –º–µ—Ç–æ–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
const resolvers = {
  Query: {
    Phones: () => _phones
  }
};

//—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ö–µ–º—É –∏ —Ä–µ–∑–æ–ª–≤–µ—Ä—ã
const server = new ApolloServer({
  typeDefs,
  resolvers
});

//—Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ª—è—Ä —Å–µ—Ä–≤–µ—Ä–∞
const HOST = process.argv[2];
const PORT = process.argv[3];
const { url } = await startStandaloneServer(server, {
  listen: { host:HOST,port: PORT },
});

console.log(`üöÄ  Server ready at: ${url}`);