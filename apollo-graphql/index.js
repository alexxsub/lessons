import { ApolloServer } from '@apollo/server';
import { startStandaloneServer } from '@apollo/server/standalone';
import mongoose from 'mongoose';

//–æ–ø–∏—Å—ã–≤–∞–µ–º —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const PhoneSchema = new mongoose.Schema({
  number: {
    type: String,
    required: true,
    unique: true,
    trim: true
  },
  name: {
    type: String,
    required: true
  }
})

//–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const Phone = mongoose.model('Phone', PhoneSchema)
const MONGO_URI = 'mongodb://localhost:27017/PhoneBook'
mongoose
  .connect(MONGO_URI)
  .then(() => console.log(`üöÄ  Database started ${MONGO_URI}`))
  .catch(err => console.error(err))


// –û–ø–∏—Å—ã–≤–∞–µ–º —Å—Ö–µ–º—É, –∏—Å–ø–æ–ª—å–∑—É—è sgl —è–∑—ã–∫
const typeDefs = `#graphql
  type Phone {
   """
    id –∑–∞–ø–∏—Å–∏
    """
    id:ID
    """
    –ù–æ–º–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    """
    number: String
    """
    –ò–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    """
    name: String
  }
  """
  –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
  """
  type Query {
    readPhones: [Phone]
  }
  """
  –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–≤–æ–¥–∞
  """
  input inputPhone {
    id:ID
    number: String!
    name: String
  }

  type Mutation {
  """
  –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ 
  """
    createPhone(input: inputPhone): Phone 
  """
  –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –æ —Ç–µ–ª–µ—Ñ–æ–Ω–µ
  """
    deletePhone(id: ID!): Phone
  """
  –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –æ —Ç–µ–ª–µ—Ñ–æ–Ω–µ
  """
    updatePhone(input: inputPhone): Phone 
  }
`;

// –û–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑–æ–ª–≤–µ—Ä –¥–ª—è –º–µ—Ç–æ–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
const resolvers = {
  Query: {
    readPhones: async () => {
      const phones = await Phone.find()
      // .limit(50)

      return phones
    }
  },
  Mutation: {
    createPhone:async (_, { input }) => {
      console.log(input)
      const res = await new Phone( {
        number:input.number,
        name:input.name
      }).save()
   
      return res
    },
    deletePhone: async (_, { id }) => {
      const res = await Phone.findByIdAndRemove({
        _id: id
      })

      return res
    },
    updatePhone:async (_, { input }) => {
      const res = await Phone.findOneAndUpdate({
        _id: input.id
      }, {
        $set: {
          number: input.number,
          name: input.name
        }
      }, {
        new: true
      }
      )
      return res
    }
  }

};

//—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ö–µ–º—É –∏ —Ä–µ–∑–æ–ª–≤–µ—Ä—ã
const server = new ApolloServer({
  typeDefs,
  resolvers
});

//—Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ª—è—Ä —Å–µ—Ä–≤–µ—Ä–∞
const HOST = process.argv[2];
const PORT = process.argv[3];
const { url } = await startStandaloneServer(server, {
  listen: { host:HOST,port: PORT },
});

console.log(`üöÄ  Server ready at: ${url}`);
